<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://jiulinxiri.github.io</id><title>jiulinxiri</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2020-12-28T10:43:07+08:00</updated> <author> <name>jiulinxiri</name> <uri>https://jiulinxiri.github.io</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jiulinxiri.github.io" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2020 jiulinxiri </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>jQuery 基础知识</title><link href="https://jiulinxiri.github.io/posts/jquery/" rel="alternate" type="text/html" title="jQuery 基础知识" /><published>2020-12-28T09:24:00+08:00</published> <updated>2020-12-28T09:24:00+08:00</updated> <id>https://jiulinxiri.github.io/posts/jquery/</id> <content src="https://jiulinxiri.github.io/posts/jquery/" /> <author> <name>jiulinxiri</name> </author> <category term="转载" /> <summary> jQuery 语法 jQuery 语法 jQuery 语法是通过选取 HTML 元素，并对选取的元素执行某些操作。 基础语法：$(selector).action() $ 符号定义 jQuery selector查询和查找 HTML 元素 jQuery 的 action() 执行对元素的操作 $(this).hide() - 隐藏当前元素 $(“p.test”).hide() - 隐藏所有 class=”test” 的 &amp;lt;p&amp;gt; 元素 文档就绪事件 $(document).ready(function(){ // 开始写 jQuery 代码 }); 这是为了防止文档在完全加载之前运行 jQuery 代码，即在 DOM 完全加载后才可以对 DOM 进行操作。如果在文档没有完全加载之前就运行函数，操作可能... </summary> </entry> <entry><title>PHP基础</title><link href="https://jiulinxiri.github.io/posts/php/" rel="alternate" type="text/html" title="PHP基础" /><published>2020-12-17T14:55:00+08:00</published> <updated>2020-12-17T14:55:00+08:00</updated> <id>https://jiulinxiri.github.io/posts/php/</id> <content src="https://jiulinxiri.github.io/posts/php/" /> <author> <name>jiulinxiri</name> </author> <category term="教程" /> <summary> PHP变量 PHP 变量的规则 变量以 $ 符号开头，其后是变量的名称 变量名称必须以字母或下划线开头 变量名称不能以数字开头 变量名称只能包含字母数字字符和下划线（A-z、0-9 以及 _） 变量名称对大小写敏感（$y 与 $Y 是两个不同的变量） &amp;lt;?php $txt="Hello world!"; $x=5; $y=10.5; ?&amp;gt; PHP 变量作用域 在 PHP 中，可以在脚本的任意位置对变量进行声明。PHP 有三种不同的变量作用域： local（局部） global（全局） static（静态） Local 和 Global 作用域 函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问。 函数内部声明的变量拥有 LOCAL 作用域，只能在函数内部进行访问。 &amp;lt;?php $x=5; // 全局... </summary> </entry> <entry><title>656</title><link href="https://jiulinxiri.github.io/posts/656/" rel="alternate" type="text/html" title="656" /><published>2020-12-17T00:00:00+08:00</published> <updated>2020-12-17T00:00:00+08:00</updated> <id>https://jiulinxiri.github.io/posts/656/</id> <content src="https://jiulinxiri.github.io/posts/656/" /> <author> <name>jiulinxiri</name> </author> <summary> </summary> </entry> <entry><title>算法的时间空间复杂度</title><link href="https://jiulinxiri.github.io/posts/fuzadu/" rel="alternate" type="text/html" title="算法的时间空间复杂度" /><published>2020-12-14T09:36:00+08:00</published> <updated>2020-12-15T09:48:24+08:00</updated> <id>https://jiulinxiri.github.io/posts/fuzadu/</id> <content src="https://jiulinxiri.github.io/posts/fuzadu/" /> <author> <name>jiulinxiri</name> </author> <category term="转载" /> <category term="概念" /> <summary> 不同算法之间的优劣主要从时间和空间两个维度去衡量。 时间维度：执行当前算法所消耗的时间，通常用时间复杂度来描述 空间维度：执行当前算法需要占用多少内存空间，通常用空间复杂度来描述 时间复杂度 时间复杂度通用的表示方式大O符号表示法 \(T(n)=O(f(n))\) 先看个例子 for (int i = 0; i &amp;lt; n; i++) { j = i; j++; } 通过大O符号表示法，这段代码的时间复杂度为：O(n), 为什么呢？ 在大O符号表示法中，时间复杂度的公式是: \(T(n)=O(f(n))\), 其中f(n)表示每行代码的执行次数之和，而O表示正比例关系，这个公式的全称是: 算法的渐进时间复杂度。 我们继续看上边的🌰️，假设每行代码的执行时间都是一样的，用1颗粒时间来表示,那么这个🌰️第一行耗时为1个颗粒时间，第三行的执行时间是n... </summary> </entry> <entry><title>十大排序算法分类</title><link href="https://jiulinxiri.github.io/posts/paixu/" rel="alternate" type="text/html" title="十大排序算法分类" /><published>2020-12-11T18:00:00+08:00</published> <updated>2020-12-17T13:57:33+08:00</updated> <id>https://jiulinxiri.github.io/posts/paixu/</id> <content src="https://jiulinxiri.github.io/posts/paixu/" /> <author> <name>jiulinxiri</name> </author> <category term="转载" /> <summary> 十大排序算法分类 十大排序算法基于比较与非比较维度的分类如下图所示： 十大排序算法分类 交换类 冒泡排序 冒泡排序，又称起泡排序，它是一种基于交换的排序典型，也是快排思想的基础。冒泡排序是一种稳定的排序算法，时间复杂度为O(n^2)。基本的思想：循环遍历多次，每次从前往后把大元素向后调，每次确定一个最大(最小)元素，多次后达到排序序列 时间复杂度相关，请参考 《算法的时间空间复杂度》 基本思想（大元素往后调） 从第一个元素开始往后遍历，每到一个位置判断是否比后面的元素大，如果比后面元素大，那么就交换两者大小，然后继续向后，这样的话进行一轮之后就可以保证「最大的那个数被交换交换到最末的位置可以确定」。 第二次同样从开始起向后判断着前进，如果当前位置比后面一个位置更大的那么就和他后面的那个数交换。但是有点注意的是，这次并不需要判断到最后，只需要判断到倒数第二... </summary> </entry> </feed>
